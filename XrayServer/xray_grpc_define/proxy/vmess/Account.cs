// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proxy/vmess/account.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xray.Proxy.Vmess {

  /// <summary>Holder for reflection information generated from proxy/vmess/account.proto</summary>
  public static partial class AccountReflection {

    #region Descriptor
    /// <summary>File descriptor for proxy/vmess/account.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AccountReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chlwcm94eS92bWVzcy9hY2NvdW50LnByb3RvEhB4cmF5LnByb3h5LnZtZXNz",
            "Gh1jb21tb24vcHJvdG9jb2wvaGVhZGVycy5wcm90byJ/CgdBY2NvdW50EgoK",
            "AmlkGAEgASgJEhAKCGFsdGVyX2lkGAIgASgNEj8KEXNlY3VyaXR5X3NldHRp",
            "bmdzGAMgASgLMiQueHJheS5jb21tb24ucHJvdG9jb2wuU2VjdXJpdHlDb25m",
            "aWcSFQoNdGVzdHNfZW5hYmxlZBgEIAEoCUJSChRjb20ueHJheS5wcm94eS52",
            "bWVzc1ABWiVnaXRodWIuY29tL3h0bHMveHJheS1jb3JlL3Byb3h5L3ZtZXNz",
            "qgIQWHJheS5Qcm94eS5WbWVzc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Xray.Common.Protocol.HeadersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xray.Proxy.Vmess.Account), global::Xray.Proxy.Vmess.Account.Parser, new[]{ "Id", "AlterId", "SecuritySettings", "TestsEnabled" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Account : pb::IMessage<Account> {
    private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Account> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xray.Proxy.Vmess.AccountReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account(Account other) : this() {
      id_ = other.id_;
      alterId_ = other.alterId_;
      securitySettings_ = other.securitySettings_ != null ? other.securitySettings_.Clone() : null;
      testsEnabled_ = other.testsEnabled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account Clone() {
      return new Account(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID of the account, in the form of a UUID, e.g.,
    /// "66ad4540-b58c-4ad2-9926-ea63445a9b57".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alter_id" field.</summary>
    public const int AlterIdFieldNumber = 2;
    private uint alterId_;
    /// <summary>
    /// Number of alternative IDs. Client and server must share the same number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AlterId {
      get { return alterId_; }
      set {
        alterId_ = value;
      }
    }

    /// <summary>Field number for the "security_settings" field.</summary>
    public const int SecuritySettingsFieldNumber = 3;
    private global::Xray.Common.Protocol.SecurityConfig securitySettings_;
    /// <summary>
    /// Security settings. Only applies to client side.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xray.Common.Protocol.SecurityConfig SecuritySettings {
      get { return securitySettings_; }
      set {
        securitySettings_ = value;
      }
    }

    /// <summary>Field number for the "tests_enabled" field.</summary>
    public const int TestsEnabledFieldNumber = 4;
    private string testsEnabled_ = "";
    /// <summary>
    /// Define tests enabled for this account
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestsEnabled {
      get { return testsEnabled_; }
      set {
        testsEnabled_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Account);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Account other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AlterId != other.AlterId) return false;
      if (!object.Equals(SecuritySettings, other.SecuritySettings)) return false;
      if (TestsEnabled != other.TestsEnabled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (AlterId != 0) hash ^= AlterId.GetHashCode();
      if (securitySettings_ != null) hash ^= SecuritySettings.GetHashCode();
      if (TestsEnabled.Length != 0) hash ^= TestsEnabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (AlterId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AlterId);
      }
      if (securitySettings_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SecuritySettings);
      }
      if (TestsEnabled.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TestsEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (AlterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AlterId);
      }
      if (securitySettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecuritySettings);
      }
      if (TestsEnabled.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestsEnabled);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Account other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.AlterId != 0) {
        AlterId = other.AlterId;
      }
      if (other.securitySettings_ != null) {
        if (securitySettings_ == null) {
          SecuritySettings = new global::Xray.Common.Protocol.SecurityConfig();
        }
        SecuritySettings.MergeFrom(other.SecuritySettings);
      }
      if (other.TestsEnabled.Length != 0) {
        TestsEnabled = other.TestsEnabled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            AlterId = input.ReadUInt32();
            break;
          }
          case 26: {
            if (securitySettings_ == null) {
              SecuritySettings = new global::Xray.Common.Protocol.SecurityConfig();
            }
            input.ReadMessage(SecuritySettings);
            break;
          }
          case 34: {
            TestsEnabled = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
