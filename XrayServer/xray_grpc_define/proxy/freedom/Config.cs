// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proxy/freedom/config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xray.Proxy.Freedom {

  /// <summary>Holder for reflection information generated from proxy/freedom/config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for proxy/freedom/config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chpwcm94eS9mcmVlZG9tL2NvbmZpZy5wcm90bxISeHJheS5wcm94eS5mcmVl",
            "ZG9tGiFjb21tb24vcHJvdG9jb2wvc2VydmVyX3NwZWMucHJvdG8iSwoTRGVz",
            "dGluYXRpb25PdmVycmlkZRI0CgZzZXJ2ZXIYASABKAsyJC54cmF5LmNvbW1v",
            "bi5wcm90b2NvbC5TZXJ2ZXJFbmRwb2ludCL/AQoGQ29uZmlnEkIKD2RvbWFp",
            "bl9zdHJhdGVneRgBIAEoDjIpLnhyYXkucHJveHkuZnJlZWRvbS5Db25maWcu",
            "RG9tYWluU3RyYXRlZ3kSEwoHdGltZW91dBgCIAEoDUICGAESRQoUZGVzdGlu",
            "YXRpb25fb3ZlcnJpZGUYAyABKAsyJy54cmF5LnByb3h5LmZyZWVkb20uRGVz",
            "dGluYXRpb25PdmVycmlkZRISCgp1c2VyX2xldmVsGAQgASgNIkEKDkRvbWFp",
            "blN0cmF0ZWd5EgkKBUFTX0lTEAASCgoGVVNFX0lQEAESCwoHVVNFX0lQNBAC",
            "EgsKB1VTRV9JUDYQA0JYChZjb20ueHJheS5wcm94eS5mcmVlZG9tUAFaJ2dp",
            "dGh1Yi5jb20veHRscy94cmF5LWNvcmUvcHJveHkvZnJlZWRvbaoCElhyYXku",
            "UHJveHkuRnJlZWRvbWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Xray.Common.Protocol.ServerSpecReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xray.Proxy.Freedom.DestinationOverride), global::Xray.Proxy.Freedom.DestinationOverride.Parser, new[]{ "Server" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xray.Proxy.Freedom.Config), global::Xray.Proxy.Freedom.Config.Parser, new[]{ "DomainStrategy", "Timeout", "DestinationOverride", "UserLevel" }, null, new[]{ typeof(global::Xray.Proxy.Freedom.Config.Types.DomainStrategy) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DestinationOverride : pb::IMessage<DestinationOverride> {
    private static readonly pb::MessageParser<DestinationOverride> _parser = new pb::MessageParser<DestinationOverride>(() => new DestinationOverride());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DestinationOverride> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xray.Proxy.Freedom.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestinationOverride() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestinationOverride(DestinationOverride other) : this() {
      server_ = other.server_ != null ? other.server_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestinationOverride Clone() {
      return new DestinationOverride(this);
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 1;
    private global::Xray.Common.Protocol.ServerEndpoint server_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xray.Common.Protocol.ServerEndpoint Server {
      get { return server_; }
      set {
        server_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DestinationOverride);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DestinationOverride other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Server, other.Server)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (server_ != null) hash ^= Server.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (server_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DestinationOverride other) {
      if (other == null) {
        return;
      }
      if (other.server_ != null) {
        if (server_ == null) {
          Server = new global::Xray.Common.Protocol.ServerEndpoint();
        }
        Server.MergeFrom(other.Server);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::Xray.Common.Protocol.ServerEndpoint();
            }
            input.ReadMessage(Server);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xray.Proxy.Freedom.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      domainStrategy_ = other.domainStrategy_;
      timeout_ = other.timeout_;
      destinationOverride_ = other.destinationOverride_ != null ? other.destinationOverride_.Clone() : null;
      userLevel_ = other.userLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "domain_strategy" field.</summary>
    public const int DomainStrategyFieldNumber = 1;
    private global::Xray.Proxy.Freedom.Config.Types.DomainStrategy domainStrategy_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xray.Proxy.Freedom.Config.Types.DomainStrategy DomainStrategy {
      get { return domainStrategy_; }
      set {
        domainStrategy_ = value;
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 2;
    private uint timeout_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    /// <summary>Field number for the "destination_override" field.</summary>
    public const int DestinationOverrideFieldNumber = 3;
    private global::Xray.Proxy.Freedom.DestinationOverride destinationOverride_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xray.Proxy.Freedom.DestinationOverride DestinationOverride {
      get { return destinationOverride_; }
      set {
        destinationOverride_ = value;
      }
    }

    /// <summary>Field number for the "user_level" field.</summary>
    public const int UserLevelFieldNumber = 4;
    private uint userLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserLevel {
      get { return userLevel_; }
      set {
        userLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DomainStrategy != other.DomainStrategy) return false;
      if (Timeout != other.Timeout) return false;
      if (!object.Equals(DestinationOverride, other.DestinationOverride)) return false;
      if (UserLevel != other.UserLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DomainStrategy != 0) hash ^= DomainStrategy.GetHashCode();
      if (Timeout != 0) hash ^= Timeout.GetHashCode();
      if (destinationOverride_ != null) hash ^= DestinationOverride.GetHashCode();
      if (UserLevel != 0) hash ^= UserLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DomainStrategy != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DomainStrategy);
      }
      if (Timeout != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Timeout);
      }
      if (destinationOverride_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DestinationOverride);
      }
      if (UserLevel != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UserLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DomainStrategy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DomainStrategy);
      }
      if (Timeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timeout);
      }
      if (destinationOverride_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestinationOverride);
      }
      if (UserLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.DomainStrategy != 0) {
        DomainStrategy = other.DomainStrategy;
      }
      if (other.Timeout != 0) {
        Timeout = other.Timeout;
      }
      if (other.destinationOverride_ != null) {
        if (destinationOverride_ == null) {
          DestinationOverride = new global::Xray.Proxy.Freedom.DestinationOverride();
        }
        DestinationOverride.MergeFrom(other.DestinationOverride);
      }
      if (other.UserLevel != 0) {
        UserLevel = other.UserLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DomainStrategy = (global::Xray.Proxy.Freedom.Config.Types.DomainStrategy) input.ReadEnum();
            break;
          }
          case 16: {
            Timeout = input.ReadUInt32();
            break;
          }
          case 26: {
            if (destinationOverride_ == null) {
              DestinationOverride = new global::Xray.Proxy.Freedom.DestinationOverride();
            }
            input.ReadMessage(DestinationOverride);
            break;
          }
          case 32: {
            UserLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Config message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DomainStrategy {
        [pbr::OriginalName("AS_IS")] AsIs = 0,
        [pbr::OriginalName("USE_IP")] UseIp = 1,
        [pbr::OriginalName("USE_IP4")] UseIp4 = 2,
        [pbr::OriginalName("USE_IP6")] UseIp6 = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
